name: android4-min

on: [pull_request, workflow_dispatch]
# on:
#   push:
#     tags:
#       - '*'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: get-version
      id: get_version
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

  android-opencv4:
    runs-on: ubuntu-20.04
    env:
      PACKAGENAME: opencv-mobile-4.6.0-android
    steps:
    - uses: actions/checkout@v3
    - name: ndk-fix-debug
      run: sed -i -e '/^  -g$/d' $ANDROID_NDK_LATEST_HOME/build/cmake/android-legacy.toolchain.cmake
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/4.6.0.zip -O opencv-4.6.0.zip
        unzip -q opencv-4.6.0.zip
        cd opencv-4.6.0
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-4.6.0-no-zlib.patch
    - name: build-armeabi-v7a
      run: |
        cd opencv-4.6.0
        mkdir build-armeabi-v7a && cd build-armeabi-v7a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="armeabi-v7a" -DANDROID_ARM_NEON=ON -DANDROID_PLATFORM=android-24 \
            -DCMAKE_INSTALL_PREFIX=install `cat ../../opencv4_cmake_options.txt` \
            -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON \
            ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-arm64-v8a
      run: |
        cd opencv-4.6.0
        mkdir build-arm64-v8a && cd build-arm64-v8a
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="arm64-v8a" -DANDROID_PLATFORM=android-24 \
            -DCMAKE_INSTALL_PREFIX=install `cat ../../opencv4_cmake_options.txt` \
            -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON -DOPENCV_EXTRA_FLAGS="-mno-outline-atomics" \
            ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86
      run: |
        cd opencv-4.6.0
        mkdir build-x86 && cd build-x86
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="x86" -DANDROID_PLATFORM=android-24 \
            -DCMAKE_INSTALL_PREFIX=install `cat ../../opencv4_cmake_options.txt` \
            -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON \
            ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-x86_64
      run: |
        cd opencv-4.6.0
        mkdir build-x86_64 && cd build-x86_64
        cmake -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
            -DANDROID_ABI="x86_64" -DANDROID_PLATFORM=android-24 \
            -DCMAKE_INSTALL_PREFIX=install `cat ../../opencv4_cmake_options.txt` \
            -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON \
            ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp -rf opencv-4.6.0/build-armeabi-v7a/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-4.6.0/build-arm64-v8a/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-4.6.0/build-x86/install/* ${{ env.PACKAGENAME }}/
        cp -rf opencv-4.6.0/build-x86_64/install/* ${{ env.PACKAGENAME }}/
        rm -rf ${{ env.PACKAGENAME }}/sdk/etc ${{ env.PACKAGENAME }}/sdk/native/3rdparty
        # rm -f ${{ env.PACKAGENAME }}/sdk/native/jni/*.mk ${{ env.PACKAGENAME }}/sdk/native/jni/android.toolchain.cmake
        zip -q9r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  release:
    needs: [setup, android-opencv4]
    runs-on: ubuntu-latest
    steps:
    - name: download
      uses: actions/download-artifact@v2
      with:
        path: artifacts

    - name: create-release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: Android-${{ github.ref }}
        release_name: Release ${{ github.ref }} Android
        draft: false
        prerelease: false

    - name: upload-android-opencv4
      id: upload_release_asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-4.6.0-android
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

name: webassembly-opencv4

on: [pull_request, workflow_dispatch]
# on:
#   push:
#     tags:
#       - '*'

env:
  DEVELOPER_DIR: /Applications/Xcode_12.4.app/Contents/Developer
  EMSCRIPTEN_VERSION: 2.0.8

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: get-version
      id: get_version
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

  webassembly-opencv4:
    runs-on: ubuntu-20.04
    env:
      PACKAGENAME: opencv-mobile-4.6.0-webassembly
    steps:
    - uses: actions/checkout@v3
    - name: emsdk
      run: |
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        ./emsdk install $EMSCRIPTEN_VERSION
        ./emsdk activate $EMSCRIPTEN_VERSION
    - name: opencv-source
      run: |
        wget -q https://github.com/opencv/opencv/archive/4.6.0.zip -O opencv-4.6.0.zip
        unzip -q opencv-4.6.0.zip
        cd opencv-4.6.0
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-4.6.0-no-zlib.patch
    - name: build
      run: |
        source emsdk/emsdk_env.sh
        cd opencv-4.6.0
        patch -p1 -i ../opencv-4.6.0-unsafe-xadd.patch
        mkdir build && cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCPU_BASELINE="" -DCPU_DISPATCH="" -DWITH_PTHREADS_PF=OFF -DCV_ENABLE_INTRINSICS=OFF -DBUILD_WASM_INTRIN_TESTS=OFF \
            -DCMAKE_C_FLAGS="-s WASM=1" -DCMAKE_CXX_FLAGS="-s WASM=1" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simd
      run: |
        source emsdk/emsdk_env.sh
        cd opencv-4.6.0
        mkdir build-simd && cd build-simd
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCPU_BASELINE="" -DCPU_DISPATCH="" -DWITH_PTHREADS_PF=OFF -DCV_ENABLE_INTRINSICS=ON -DBUILD_WASM_INTRIN_TESTS=OFF \
            -DCMAKE_C_FLAGS="-s WASM=1 -msimd128" -DCMAKE_CXX_FLAGS="-s WASM=1 -msimd128" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-threads
      run: |
        source emsdk/emsdk_env.sh
        cd opencv-4.6.0
        patch -p1 -R -i ../opencv-4.6.0-unsafe-xadd.patch
        mkdir build-threads && cd build-threads
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCPU_BASELINE="" -DCPU_DISPATCH="" -DWITH_PTHREADS_PF=ON -DCV_ENABLE_INTRINSICS=OFF -DBUILD_WASM_INTRIN_TESTS=OFF \
            -DCMAKE_C_FLAGS="-s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4" -DCMAKE_CXX_FLAGS="-s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4" \
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: build-simd-threads
      run: |
        source emsdk/emsdk_env.sh
        cd opencv-4.6.0
        mkdir build-simd-threads && cd build-simd-threads
        cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake \
            -DCPU_BASELINE="" -DCPU_DISPATCH="" -DWITH_PTHREADS_PF=ON -DCV_ENABLE_INTRINSICS=ON -DBUILD_WASM_INTRIN_TESTS=OFF \
            -DCMAKE_C_FLAGS="-s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4 -msimd128" -DCMAKE_CXX_FLAGS="-s WASM=1 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=4 -msimd128" \
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            `cat ../../opencv4_cmake_options.txt` -DBUILD_opencv_world=OFF -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -rf opencv-4.6.0/build/install ${{ env.PACKAGENAME }}/basic
        cp -rf opencv-4.6.0/build-simd/install ${{ env.PACKAGENAME }}/simd
        cp -rf opencv-4.6.0/build-threads/install ${{ env.PACKAGENAME }}/threads
        cp -rf opencv-4.6.0/build-simd-threads/install ${{ env.PACKAGENAME }}/simd-threads
        rm -rf ${{ env.PACKAGENAME }}/basic/share/opencv4
        rm -rf ${{ env.PACKAGENAME }}/simd/share/opencv4
        rm -rf ${{ env.PACKAGENAME }}/threads/share/opencv4
        rm -rf ${{ env.PACKAGENAME }}/simd-threads/share/opencv4
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  release:
    needs: [setup, webassembly-opencv4]
    runs-on: ubuntu-latest
    steps:
    - name: download
      uses: actions/download-artifact@v2
      with:
        path: artifacts

    - name: create-release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.setup.outputs.VERSION }}
        release_name: Release ${{ needs.setup.outputs.VERSION }}
        draft: false
        prerelease: false

    - name: upload-webassembly-opencv4
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-4.6.0-webassembly
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

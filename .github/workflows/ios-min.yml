name: ios-min

# on: [pull_request, workflow_dispatch]
on:
  push:
    tags:
      - '*'

env:
  DEVELOPER_DIR: /Applications/Xcode_12.4.app/Contents/Developer
  EMSCRIPTEN_VERSION: 2.0.8

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: get-version
      id: get_version
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

  ios-opencv4:
    runs-on: macos-11
    env:
      OPENCV_VERSION: 4.6.0
      PACKAGENAME: opencv-mobile-4.6.0-ios
    steps:
    - uses: actions/checkout@v3
    - name: opencv-source
      run: |
        echo "Package name:" ${{ env.PACKAGENAME }}
        wget -q https://github.com/opencv/opencv/archive/${{ env.OPENCV_VERSION }}.zip -O opencv-${{ env.OPENCV_VERSION }}.zip
        unzip -q opencv-${{ env.OPENCV_VERSION }}.zip
        cd opencv-${{ env.OPENCV_VERSION }}
        echo -n > cmake/OpenCVFindLibsGrfmt.cmake
        patch -p1 -i ../opencv-4.6.0-no-zlib.patch
    - name: build-ios
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-ios && cd build-ios
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake \
            -DIOS_PLATFORM=OS -DENABLE_BITCODE=0 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="arm64" \
            -DCMAKE_INSTALL_PREFIX=install `cat ../../opencv4_cmake_options.txt` \
            -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON \
            ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: build-simulator
      run: |
        cd opencv-${{ env.OPENCV_VERSION }}
        mkdir build-simulator && cd build-simulator
        cmake -DCMAKE_TOOLCHAIN_FILE=../../toolchains/ios.toolchain.cmake \
            -DIOS_PLATFORM=SIMULATOR -DENABLE_BITCODE=0 -DENABLE_ARC=0 -DENABLE_VISIBILITY=0 -DIOS_ARCH="x86_64;arm64" \
            -DCMAKE_INSTALL_PREFIX=install `cat ../../opencv4_cmake_options.txt` \
            -DBUILD_opencv_world=ON -DOPENCV_DISABLE_FILESYSTEM_SUPPORT=ON \
            ..
        cmake --build . -j 3
        cmake --build . --target install
    - name: package
      run: |
        rm -rf opencv2.xcframework
        mkdir -p opencv2.xcframework/Headers
        cp -r opencv-${{ env.OPENCV_VERSION }}/build-ios/install/include/opencv4/* opencv2.xcframework/Headers/
        pushd opencv-${{ env.OPENCV_VERSION }}/build-ios/install/lib
        cp libopencv_world.a libopencv.a
        popd
        pushd opencv-${{ env.OPENCV_VERSION }}/build-simulator/install/lib
        cp libopencv_world.a libopencv.a
        popd
        xcodebuild -create-xcframework \
            -library opencv-${{ env.OPENCV_VERSION }}/build-ios/install/lib/libopencv.a \
            -library opencv-${{ env.OPENCV_VERSION }}/build-simulator/install/lib/libopencv.a \
            -output opencv2.xcframework
        zip -q9yr ${{ env.PACKAGENAME }}.zip opencv2.xcframework

    - name: upload-zip
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  release:
    needs: [setup, ios-opencv4]
    runs-on: ubuntu-latest
    steps:
    - name: download
      uses: actions/download-artifact@v2
      with:
        path: artifacts

    - name: create-release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: iOS-${{ github.ref }}
        release_name: Release ${{ github.ref }} iOS
        draft: false
        prerelease: false

    - name: upload-ios-opencv4
      id: upload_release_asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: opencv-mobile-4.6.0-ios
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip
